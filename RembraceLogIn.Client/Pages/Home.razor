@page "/"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Home</PageTitle>
<AuthorizeView>
    <Authorized>
        <a href="LogOut"><button class="nav_butt">Log out</button></a>
    </Authorized>
    <NotAuthorized>
        <a href="Access/{@toggle}"><button class="nav_butt">Sign Up</button></a>
        <a href="Access/{@toggle}"><button class="nav_butt" @onclick="@ToggleLogin">Log in</button></a>
    </NotAuthorized>
</AuthorizeView>
<div class="welcome-tag">
    <img src="Images/rembrace_text_white.png" id="logo">
<!--<RembraceLogIn.Client.Pages.LoginDisplay></RembraceLogIn.Client.Pages.LoginDisplay>-->
<!--If the user is logged in greet them with the username-->
<AuthorizeView>
    <Authorized>
        <h1>Welcome, @context.User.Identity!.Name</h1>
    </Authorized>
    <NotAuthorized>
        <h1>Technical Task</h1>
    </NotAuthorized>
</AuthorizeView>
</div>

<div class="home-content">
    <AuthorizeView Roles="Admin"> <!--Show text based on if the user is logged in or not-->
        <Authorized>
            <h2>You are now logged in. Your credentials are stored in the server.</h2>
                <table> <!--Table shows the users that are registered in the database-->
                    <thead>
                        <tr>
                            <th>Registered Users</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (var i = 0; i < Users.Count; i++) //!--List all usernames, email == username for the demo
                        {
                            <tr>
                                <td>@Users[i].UserName</td>
                            </tr>
                        }
                    </tbody>
                </table>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView Roles="User">
        <!--Show text based on if the user is logged in or not-->
        <Authorized>
            <h2>User specific features will be implemented soon.</h2>
        </Authorized>
        <NotAuthorized>
            <h2>Please log in or sign up.</h2>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code{
    public bool on { get; set; }
    public string? toggle;
    void ToggleLogin() //since the Signup/Login is a combined form, this code changes the state of the form to match which link was clicked.
    {
        if (on)// the boolean value sets the toggle, the method is only applied on login click, boolean logic handles the register form
        {
            toggle = "unchecked";
        }
        else
        {
            toggle = "defaultchecked";
        }
        on = !on;
    }

    private List<UserModel> Users = new List<UserModel>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Users = await Http.GetFromJsonAsync<List<UserModel>>("api/User"); //await response from the server for getting thr information from the server
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception e)
        {
            Console.Write(e);
        }

    }
}




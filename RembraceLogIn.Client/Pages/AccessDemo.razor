@page "/access/{toggle}"

@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="dividend">
	<!--Dispay errors based on where they are coming from, either loginresult or registerresult-->
	@if (ShowErrors_reg)
	{
		<div class="alert alert-danger valerror" role="alert">
			@if (Errors != null) foreach (var error in Errors!)
				{
					<p>@error</p>
				}
		</div>
		ShowErrors_reg = false;
	}
	else if (ShowErrors_log) 
	{
		
		<div class="alert alert-danger valerror" role="alert">
			<p>@Error</p> <!--only one error, either incorrect username or password-->
		</div>
		ShowErrors_log = false;
	}
<div class="main">
		@if (toggle == "{}") //conditional sets Access page to either Sign up or Log in depending on the button clicked in Home
		{
			<input type="checkbox" id="chk" aria-hidden="true">
		}
		else if (toggle == "{defaultchecked}")
		{
			<input type="checkbox" id="chk" aria-hidden="true" checked>
		}
	<img src="Images/rembrace_text_white.png" id="logo">
	<div class="signup">
		<EditForm Model="registerModel" OnValidSubmit="HandleRegistration">
			<DataAnnotationsValidator></DataAnnotationsValidator> <!--Display input validation feedback-->
			@*<ValidationSummary></ValidationSummary>*@
			<label for="chk" aria-hidden="true">Sign up</label>
			<InputText type="email" name="email" placeholder="Email" @bind-Value="registerModel.Email"/>
			<ValidationMessage For="@(() => registerModel.Email)" />
			<InputText type="Password" name="pswd" placeholder="Password" @bind-Value="registerModel.Password" />
			<ValidationMessage For="@(() => registerModel.Password)" />
			<InputText type="Password" name="confirm_pswd" placeholder="Confirm password" @bind-Value="registerModel.ConfirmPassword"/>
			<ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
			<button type = "submit">Sign up</button>
		</EditForm>
	</div>
	<div class="login">
		<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
			<DataAnnotationsValidator></DataAnnotationsValidator>
			@* <ValidationSummary></ValidationSummary> *@
			<label for="chk" aria-hidden="true">Login</label>
			<InputText id="log_email" name="email" placeholder="Email" @bind-Value="loginModel.Email" />
			<ValidationMessage For="@(() => loginModel.Email)" />
			<InputText id="log_pass" type ="Password" name="pswd" placeholder="Password" @bind-Value="loginModel.Password"/>
			<ValidationMessage For="@(() => loginModel.Password)" />
			<button type="submit">Login</button>
		</EditForm>
	</div>
</div>
</div>

@code {

	private LoginModel loginModel = new LoginModel();
	private RegisterModel registerModel = new RegisterModel();
	private bool ShowErrors_reg;
	private bool ShowErrors_log;
	private string Error = "";
	private IEnumerable<string>? Errors;
	[Parameter]
	public string? toggle { get; set; }

	private async Task HandleLogin()
	{
		ShowErrors_log = false;

		var result = await AuthService.Login(loginModel);

		if (result.Successful) // after successful login return home
		{
			NavigationManager.NavigateTo("/");
		}
		else
		{
			Error = result.Error!;
			ShowErrors_log = true;
		}
	}

	private async Task HandleRegistration()
	{
		ShowErrors_reg = false;

		var result = await AuthService.Register(registerModel);

		if (result.Successful) // if successfully registered go to login screen
		{
			toggle = "{defaultchecked}";
			NavigationManager.NavigateTo("/access/"+toggle);
		}
		else
		{
			Errors = result.Errors;
			ShowErrors_reg = true;
		}
	}

}
